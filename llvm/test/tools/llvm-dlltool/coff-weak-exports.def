; RUN: llvm-dlltool -m i386:x86-64 --input-def %s --output-lib %t.a
; RUN: llvm-nm %t.a | FileCheck %s
; RUN: llvm-objdump -s -t %t.a | FileCheck -check-prefix=CONTENTS %s

LIBRARY test.dll
EXPORTS
TestFunction==AltTestFunction
; When creating an import library, the DLL internal function name of
; the implementation of a function isn't visible at all.
ImpLibName = Implementation
; A different import library name and implementation name can be mixed
; with exposing it via a different name in the DLL than in code.
ImpLibName2 = Implementation2 == AltTestFunction2
; The fact that a DLL export entry is a forward to a different DLL doesn't
; matter for the import library
ImpLibName3 = kernel32.Sleep

; CHECK: T TestFunction
; CHECK: I __imp_TestFunction
; CHECK: T ImpLibName
; CHECK: I __imp_ImpLibName
; CHECK: T ImpLibName2
; CHECK: I __imp_ImpLibName2
; CHECK: T ImpLibName3
; CHECK: I __imp_ImpLibName3

; CONTENTS: {{.*}}(dtest_s00000.o)
; CONTENTS: Contents of section .idata$6:
; CONTENTS-NEXT:  ..AltTestFunctio
; CONTENTS-NEXT:  n.
; CONTENTS: __imp_TestFunction

; CONTENTS: {{.*}}(dtest_s00001.o)
; CONTENTS: Contents of section .idata$6:
; CONTENTS-NEXT:  ..ImpLibName..
; CONTENTS: __imp_ImpLibName

; CONTENTS: {{.*}}(dtest_s00002.o)
; CONTENTS: Contents of section .idata$6:
; CONTENTS-NEXT:  ..AltTestFunctio
; CONTENTS-NEXT:  n2..
; CONTENTS: __imp_ImpLibName2

; CONTENTS: {{.*}}(dtest_s00003.o)
; CONTENTS: Contents of section .idata$6:
; CONTENTS-NEXT:  ..ImpLibName3
; CONTENTS: __imp_ImpLibName3
